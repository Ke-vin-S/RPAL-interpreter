//let f x y = x + -3
//in Print(f 3 (1))//
//Print (Inc 7, true) where Inc x = x + 1
//Print(1 ** 3 *2, 'csaa')
//Print(1 ** 3 **2, 'csaa')
//let a = 2 and b = 5 and c =3 in Print(x + y)
//let c=3 within x = c within f x = x + c in Print(f 3)
//let a = nil aug 5 aug 2 in Print(a)
//let f x y z = x + y + z in f 1 2 3
//Print(not -3 + 5 /3 > 1)
//let f x y = x + y in 3 @f 2
//Print((2, 3) 1)
//(fn n.n < 0 -> -n | n)(-3)
//(fn (x,y).x+y)(5,6)
//let rec f n = n eq 1 -> 1 | n * f (n -1) in f 3
//let rec f n = n eq 1 -> 1 | n * f (n -1) in f 3
//Print(1,2,3,3)
//let a = 3 and b = 2 in Print(a,b, 3)
//Print(not -3 + 5 /3 > 1)
//let rec f n = n eq 1 -> 1 | n * f (n -1) in f 3
//let f x y = x + 3 in Print(f 3 1)
//let f x y = x in Print(f 3 1)
//Print(- 2 + 2 + 3)
//Print( true & not true & false)
//Print(true -> 1 | 2)
//Print(1,2,3)
//Print((1,2) aug 3)
//Print(nil aug 3)
//Print(nil aug 3 aug 2)
//let a = 5 in Print(a)
//Print(a) where a = 5
//(fn x y z. x + y) 2 3 1
//Print(2 @f 3 @f 5) where f x y= x + y
//let Add x y z = x + y in Print (2 @Add 3 @Add 4 @Add 5)
//(fn x.x-1) 4 * 2
//(fn x.x - 1) 4
//true or true or false
//let f x y = x + y in 3 @f y
//Print(-2)
//(fn x y. x + y) 5 6
//print(1,2,3)
//(fn x. x > 1 -> 1| 5) 5
//(fn x. n < 0 -> -n| n) (- 5)
//Print(1 + true)  // check for errors
//(fn x. -x) 1
//not true
//(1,2,3)  3
//(fn (x,y). x - y) (5,6)
//let T = (2,3) in let A = T aug 4 in Print (A)
//let a = 2 in a
//let c = 2 within d = 1 within f x = x + c + d in f 3
//a where a = 2
//let f x y z = x - y  in f 1 2 3
//let x = 5 and y = 3 in x + y
//Print(1, 2, 3)
//(fn x y z. x - y - z) 5 1 2
//let rec f n = n eq 1 -> 1 | n * f (n -1) in f 4
//nil aug 2 aug true aug 'pak'
//let f a b = a - b in 1 @f (2 @f 3)
//let rec f n = n eq 0 -> 'even' | n eq 1 -> 'odd' | f(n-2) in f 5
//true & not false
//Isinteger true
//Istruthvalue 11
Isstring true
//Istuple (1,2)
